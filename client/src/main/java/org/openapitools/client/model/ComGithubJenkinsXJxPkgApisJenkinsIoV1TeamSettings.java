/*
 * Jenkins X
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ComGithubJenkinsXJxPkgApisJenkinsIoV1QuickStartLocation;
import org.openapitools.client.model.ComGithubJenkinsXJxPkgApisJenkinsIoV1StorageLocation;
import org.openapitools.client.model.IoK8sApiBatchV1Job;

/**
 * TeamSettings the default settings for a team
 */
@ApiModel(description = "TeamSettings the default settings for a team")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-03-28T12:38:15.775957Z[Europe/London]")
public class ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings {
  public static final String SERIALIZED_NAME_APPS_REPOSITORY = "appsRepository";
  @SerializedName(SERIALIZED_NAME_APPS_REPOSITORY)
  private String appsRepository;

  public static final String SERIALIZED_NAME_ASK_ON_CREATE = "askOnCreate";
  @SerializedName(SERIALIZED_NAME_ASK_ON_CREATE)
  private Boolean askOnCreate;

  public static final String SERIALIZED_NAME_BRANCH_PATTERNS = "branchPatterns";
  @SerializedName(SERIALIZED_NAME_BRANCH_PATTERNS)
  private String branchPatterns;

  public static final String SERIALIZED_NAME_BUILD_PACK_NAME = "buildPackName";
  @SerializedName(SERIALIZED_NAME_BUILD_PACK_NAME)
  private String buildPackName;

  public static final String SERIALIZED_NAME_BUILD_PACK_REF = "buildPackRef";
  @SerializedName(SERIALIZED_NAME_BUILD_PACK_REF)
  private String buildPackRef;

  public static final String SERIALIZED_NAME_BUILD_PACK_URL = "buildPackUrl";
  @SerializedName(SERIALIZED_NAME_BUILD_PACK_URL)
  private String buildPackUrl;

  public static final String SERIALIZED_NAME_DOCKER_REGISTRY_ORG = "dockerRegistryOrg";
  @SerializedName(SERIALIZED_NAME_DOCKER_REGISTRY_ORG)
  private String dockerRegistryOrg;

  public static final String SERIALIZED_NAME_ENV_ORGANISATION = "envOrganisation";
  @SerializedName(SERIALIZED_NAME_ENV_ORGANISATION)
  private String envOrganisation;

  public static final String SERIALIZED_NAME_FORK_BRANCH_PATTERNS = "forkBranchPatterns";
  @SerializedName(SERIALIZED_NAME_FORK_BRANCH_PATTERNS)
  private String forkBranchPatterns;

  public static final String SERIALIZED_NAME_GIT_PRIVATE = "gitPrivate";
  @SerializedName(SERIALIZED_NAME_GIT_PRIVATE)
  private Boolean gitPrivate;

  public static final String SERIALIZED_NAME_GIT_SERVER = "gitServer";
  @SerializedName(SERIALIZED_NAME_GIT_SERVER)
  private String gitServer;

  public static final String SERIALIZED_NAME_HELM_BINARY = "helmBinary";
  @SerializedName(SERIALIZED_NAME_HELM_BINARY)
  private String helmBinary;

  public static final String SERIALIZED_NAME_HELM_TEMPLATE = "helmTemplate";
  @SerializedName(SERIALIZED_NAME_HELM_TEMPLATE)
  private Boolean helmTemplate;

  public static final String SERIALIZED_NAME_IMPORT_MODE = "importMode";
  @SerializedName(SERIALIZED_NAME_IMPORT_MODE)
  private String importMode;

  public static final String SERIALIZED_NAME_KUBE_PROVIDER = "kubeProvider";
  @SerializedName(SERIALIZED_NAME_KUBE_PROVIDER)
  private String kubeProvider;

  public static final String SERIALIZED_NAME_NO_TILLER = "noTiller";
  @SerializedName(SERIALIZED_NAME_NO_TILLER)
  private Boolean noTiller;

  public static final String SERIALIZED_NAME_ORGANISATION = "organisation";
  @SerializedName(SERIALIZED_NAME_ORGANISATION)
  private String organisation;

  public static final String SERIALIZED_NAME_PIPELINE_USERNAME = "pipelineUsername";
  @SerializedName(SERIALIZED_NAME_PIPELINE_USERNAME)
  private String pipelineUsername;

  public static final String SERIALIZED_NAME_POST_PREVIEW_JOBS = "postPreviewJobs";
  @SerializedName(SERIALIZED_NAME_POST_PREVIEW_JOBS)
  private List<IoK8sApiBatchV1Job> postPreviewJobs = null;

  public static final String SERIALIZED_NAME_PROMOTION_ENGINE = "promotionEngine";
  @SerializedName(SERIALIZED_NAME_PROMOTION_ENGINE)
  private String promotionEngine;

  public static final String SERIALIZED_NAME_PROW_ENGINE = "prowEngine";
  @SerializedName(SERIALIZED_NAME_PROW_ENGINE)
  private String prowEngine;

  public static final String SERIALIZED_NAME_QUICKSTART_LOCATIONS = "quickstartLocations";
  @SerializedName(SERIALIZED_NAME_QUICKSTART_LOCATIONS)
  private List<ComGithubJenkinsXJxPkgApisJenkinsIoV1QuickStartLocation> quickstartLocations = null;

  public static final String SERIALIZED_NAME_STORAGE_LOCATIONS = "storageLocations";
  @SerializedName(SERIALIZED_NAME_STORAGE_LOCATIONS)
  private List<ComGithubJenkinsXJxPkgApisJenkinsIoV1StorageLocation> storageLocations = null;

  public static final String SERIALIZED_NAME_USE_GIT_OPS = "useGitOps";
  @SerializedName(SERIALIZED_NAME_USE_GIT_OPS)
  private Boolean useGitOps;

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings appsRepository(String appsRepository) {
    this.appsRepository = appsRepository;
    return this;
  }

   /**
   * Get appsRepository
   * @return appsRepository
  **/
  @ApiModelProperty(value = "")
  public String getAppsRepository() {
    return appsRepository;
  }

  public void setAppsRepository(String appsRepository) {
    this.appsRepository = appsRepository;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings askOnCreate(Boolean askOnCreate) {
    this.askOnCreate = askOnCreate;
    return this;
  }

   /**
   * Get askOnCreate
   * @return askOnCreate
  **/
  @ApiModelProperty(value = "")
  public Boolean getAskOnCreate() {
    return askOnCreate;
  }

  public void setAskOnCreate(Boolean askOnCreate) {
    this.askOnCreate = askOnCreate;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings branchPatterns(String branchPatterns) {
    this.branchPatterns = branchPatterns;
    return this;
  }

   /**
   * Get branchPatterns
   * @return branchPatterns
  **/
  @ApiModelProperty(value = "")
  public String getBranchPatterns() {
    return branchPatterns;
  }

  public void setBranchPatterns(String branchPatterns) {
    this.branchPatterns = branchPatterns;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings buildPackName(String buildPackName) {
    this.buildPackName = buildPackName;
    return this;
  }

   /**
   * Get buildPackName
   * @return buildPackName
  **/
  @ApiModelProperty(value = "")
  public String getBuildPackName() {
    return buildPackName;
  }

  public void setBuildPackName(String buildPackName) {
    this.buildPackName = buildPackName;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings buildPackRef(String buildPackRef) {
    this.buildPackRef = buildPackRef;
    return this;
  }

   /**
   * Get buildPackRef
   * @return buildPackRef
  **/
  @ApiModelProperty(value = "")
  public String getBuildPackRef() {
    return buildPackRef;
  }

  public void setBuildPackRef(String buildPackRef) {
    this.buildPackRef = buildPackRef;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings buildPackUrl(String buildPackUrl) {
    this.buildPackUrl = buildPackUrl;
    return this;
  }

   /**
   * Get buildPackUrl
   * @return buildPackUrl
  **/
  @ApiModelProperty(value = "")
  public String getBuildPackUrl() {
    return buildPackUrl;
  }

  public void setBuildPackUrl(String buildPackUrl) {
    this.buildPackUrl = buildPackUrl;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings dockerRegistryOrg(String dockerRegistryOrg) {
    this.dockerRegistryOrg = dockerRegistryOrg;
    return this;
  }

   /**
   * Get dockerRegistryOrg
   * @return dockerRegistryOrg
  **/
  @ApiModelProperty(value = "")
  public String getDockerRegistryOrg() {
    return dockerRegistryOrg;
  }

  public void setDockerRegistryOrg(String dockerRegistryOrg) {
    this.dockerRegistryOrg = dockerRegistryOrg;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings envOrganisation(String envOrganisation) {
    this.envOrganisation = envOrganisation;
    return this;
  }

   /**
   * Get envOrganisation
   * @return envOrganisation
  **/
  @ApiModelProperty(value = "")
  public String getEnvOrganisation() {
    return envOrganisation;
  }

  public void setEnvOrganisation(String envOrganisation) {
    this.envOrganisation = envOrganisation;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings forkBranchPatterns(String forkBranchPatterns) {
    this.forkBranchPatterns = forkBranchPatterns;
    return this;
  }

   /**
   * Get forkBranchPatterns
   * @return forkBranchPatterns
  **/
  @ApiModelProperty(value = "")
  public String getForkBranchPatterns() {
    return forkBranchPatterns;
  }

  public void setForkBranchPatterns(String forkBranchPatterns) {
    this.forkBranchPatterns = forkBranchPatterns;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings gitPrivate(Boolean gitPrivate) {
    this.gitPrivate = gitPrivate;
    return this;
  }

   /**
   * Get gitPrivate
   * @return gitPrivate
  **/
  @ApiModelProperty(value = "")
  public Boolean getGitPrivate() {
    return gitPrivate;
  }

  public void setGitPrivate(Boolean gitPrivate) {
    this.gitPrivate = gitPrivate;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings gitServer(String gitServer) {
    this.gitServer = gitServer;
    return this;
  }

   /**
   * Get gitServer
   * @return gitServer
  **/
  @ApiModelProperty(value = "")
  public String getGitServer() {
    return gitServer;
  }

  public void setGitServer(String gitServer) {
    this.gitServer = gitServer;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings helmBinary(String helmBinary) {
    this.helmBinary = helmBinary;
    return this;
  }

   /**
   * Get helmBinary
   * @return helmBinary
  **/
  @ApiModelProperty(value = "")
  public String getHelmBinary() {
    return helmBinary;
  }

  public void setHelmBinary(String helmBinary) {
    this.helmBinary = helmBinary;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings helmTemplate(Boolean helmTemplate) {
    this.helmTemplate = helmTemplate;
    return this;
  }

   /**
   * Get helmTemplate
   * @return helmTemplate
  **/
  @ApiModelProperty(value = "")
  public Boolean getHelmTemplate() {
    return helmTemplate;
  }

  public void setHelmTemplate(Boolean helmTemplate) {
    this.helmTemplate = helmTemplate;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings importMode(String importMode) {
    this.importMode = importMode;
    return this;
  }

   /**
   * ImportMode indicates what kind of
   * @return importMode
  **/
  @ApiModelProperty(value = "ImportMode indicates what kind of")
  public String getImportMode() {
    return importMode;
  }

  public void setImportMode(String importMode) {
    this.importMode = importMode;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings kubeProvider(String kubeProvider) {
    this.kubeProvider = kubeProvider;
    return this;
  }

   /**
   * Get kubeProvider
   * @return kubeProvider
  **/
  @ApiModelProperty(value = "")
  public String getKubeProvider() {
    return kubeProvider;
  }

  public void setKubeProvider(String kubeProvider) {
    this.kubeProvider = kubeProvider;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings noTiller(Boolean noTiller) {
    this.noTiller = noTiller;
    return this;
  }

   /**
   * Get noTiller
   * @return noTiller
  **/
  @ApiModelProperty(value = "")
  public Boolean getNoTiller() {
    return noTiller;
  }

  public void setNoTiller(Boolean noTiller) {
    this.noTiller = noTiller;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings organisation(String organisation) {
    this.organisation = organisation;
    return this;
  }

   /**
   * Get organisation
   * @return organisation
  **/
  @ApiModelProperty(value = "")
  public String getOrganisation() {
    return organisation;
  }

  public void setOrganisation(String organisation) {
    this.organisation = organisation;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings pipelineUsername(String pipelineUsername) {
    this.pipelineUsername = pipelineUsername;
    return this;
  }

   /**
   * Get pipelineUsername
   * @return pipelineUsername
  **/
  @ApiModelProperty(value = "")
  public String getPipelineUsername() {
    return pipelineUsername;
  }

  public void setPipelineUsername(String pipelineUsername) {
    this.pipelineUsername = pipelineUsername;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings postPreviewJobs(List<IoK8sApiBatchV1Job> postPreviewJobs) {
    this.postPreviewJobs = postPreviewJobs;
    return this;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings addPostPreviewJobsItem(IoK8sApiBatchV1Job postPreviewJobsItem) {
    if (this.postPreviewJobs == null) {
      this.postPreviewJobs = new ArrayList<IoK8sApiBatchV1Job>();
    }
    this.postPreviewJobs.add(postPreviewJobsItem);
    return this;
  }

   /**
   * Get postPreviewJobs
   * @return postPreviewJobs
  **/
  @ApiModelProperty(value = "")
  public List<IoK8sApiBatchV1Job> getPostPreviewJobs() {
    return postPreviewJobs;
  }

  public void setPostPreviewJobs(List<IoK8sApiBatchV1Job> postPreviewJobs) {
    this.postPreviewJobs = postPreviewJobs;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings promotionEngine(String promotionEngine) {
    this.promotionEngine = promotionEngine;
    return this;
  }

   /**
   * Get promotionEngine
   * @return promotionEngine
  **/
  @ApiModelProperty(value = "")
  public String getPromotionEngine() {
    return promotionEngine;
  }

  public void setPromotionEngine(String promotionEngine) {
    this.promotionEngine = promotionEngine;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings prowEngine(String prowEngine) {
    this.prowEngine = prowEngine;
    return this;
  }

   /**
   * ProwEngine is the kind of prow engine used such as knative build or build pipeline
   * @return prowEngine
  **/
  @ApiModelProperty(value = "ProwEngine is the kind of prow engine used such as knative build or build pipeline")
  public String getProwEngine() {
    return prowEngine;
  }

  public void setProwEngine(String prowEngine) {
    this.prowEngine = prowEngine;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings quickstartLocations(List<ComGithubJenkinsXJxPkgApisJenkinsIoV1QuickStartLocation> quickstartLocations) {
    this.quickstartLocations = quickstartLocations;
    return this;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings addQuickstartLocationsItem(ComGithubJenkinsXJxPkgApisJenkinsIoV1QuickStartLocation quickstartLocationsItem) {
    if (this.quickstartLocations == null) {
      this.quickstartLocations = new ArrayList<ComGithubJenkinsXJxPkgApisJenkinsIoV1QuickStartLocation>();
    }
    this.quickstartLocations.add(quickstartLocationsItem);
    return this;
  }

   /**
   * Get quickstartLocations
   * @return quickstartLocations
  **/
  @ApiModelProperty(value = "")
  public List<ComGithubJenkinsXJxPkgApisJenkinsIoV1QuickStartLocation> getQuickstartLocations() {
    return quickstartLocations;
  }

  public void setQuickstartLocations(List<ComGithubJenkinsXJxPkgApisJenkinsIoV1QuickStartLocation> quickstartLocations) {
    this.quickstartLocations = quickstartLocations;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings storageLocations(List<ComGithubJenkinsXJxPkgApisJenkinsIoV1StorageLocation> storageLocations) {
    this.storageLocations = storageLocations;
    return this;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings addStorageLocationsItem(ComGithubJenkinsXJxPkgApisJenkinsIoV1StorageLocation storageLocationsItem) {
    if (this.storageLocations == null) {
      this.storageLocations = new ArrayList<ComGithubJenkinsXJxPkgApisJenkinsIoV1StorageLocation>();
    }
    this.storageLocations.add(storageLocationsItem);
    return this;
  }

   /**
   * Get storageLocations
   * @return storageLocations
  **/
  @ApiModelProperty(value = "")
  public List<ComGithubJenkinsXJxPkgApisJenkinsIoV1StorageLocation> getStorageLocations() {
    return storageLocations;
  }

  public void setStorageLocations(List<ComGithubJenkinsXJxPkgApisJenkinsIoV1StorageLocation> storageLocations) {
    this.storageLocations = storageLocations;
  }

  public ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings useGitOps(Boolean useGitOps) {
    this.useGitOps = useGitOps;
    return this;
  }

   /**
   * Get useGitOps
   * @return useGitOps
  **/
  @ApiModelProperty(value = "")
  public Boolean getUseGitOps() {
    return useGitOps;
  }

  public void setUseGitOps(Boolean useGitOps) {
    this.useGitOps = useGitOps;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings = (ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings) o;
    return Objects.equals(this.appsRepository, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.appsRepository) &&
        Objects.equals(this.askOnCreate, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.askOnCreate) &&
        Objects.equals(this.branchPatterns, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.branchPatterns) &&
        Objects.equals(this.buildPackName, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.buildPackName) &&
        Objects.equals(this.buildPackRef, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.buildPackRef) &&
        Objects.equals(this.buildPackUrl, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.buildPackUrl) &&
        Objects.equals(this.dockerRegistryOrg, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.dockerRegistryOrg) &&
        Objects.equals(this.envOrganisation, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.envOrganisation) &&
        Objects.equals(this.forkBranchPatterns, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.forkBranchPatterns) &&
        Objects.equals(this.gitPrivate, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.gitPrivate) &&
        Objects.equals(this.gitServer, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.gitServer) &&
        Objects.equals(this.helmBinary, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.helmBinary) &&
        Objects.equals(this.helmTemplate, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.helmTemplate) &&
        Objects.equals(this.importMode, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.importMode) &&
        Objects.equals(this.kubeProvider, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.kubeProvider) &&
        Objects.equals(this.noTiller, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.noTiller) &&
        Objects.equals(this.organisation, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.organisation) &&
        Objects.equals(this.pipelineUsername, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.pipelineUsername) &&
        Objects.equals(this.postPreviewJobs, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.postPreviewJobs) &&
        Objects.equals(this.promotionEngine, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.promotionEngine) &&
        Objects.equals(this.prowEngine, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.prowEngine) &&
        Objects.equals(this.quickstartLocations, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.quickstartLocations) &&
        Objects.equals(this.storageLocations, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.storageLocations) &&
        Objects.equals(this.useGitOps, comGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings.useGitOps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appsRepository, askOnCreate, branchPatterns, buildPackName, buildPackRef, buildPackUrl, dockerRegistryOrg, envOrganisation, forkBranchPatterns, gitPrivate, gitServer, helmBinary, helmTemplate, importMode, kubeProvider, noTiller, organisation, pipelineUsername, postPreviewJobs, promotionEngine, prowEngine, quickstartLocations, storageLocations, useGitOps);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubJenkinsXJxPkgApisJenkinsIoV1TeamSettings {\n");
    
    sb.append("    appsRepository: ").append(toIndentedString(appsRepository)).append("\n");
    sb.append("    askOnCreate: ").append(toIndentedString(askOnCreate)).append("\n");
    sb.append("    branchPatterns: ").append(toIndentedString(branchPatterns)).append("\n");
    sb.append("    buildPackName: ").append(toIndentedString(buildPackName)).append("\n");
    sb.append("    buildPackRef: ").append(toIndentedString(buildPackRef)).append("\n");
    sb.append("    buildPackUrl: ").append(toIndentedString(buildPackUrl)).append("\n");
    sb.append("    dockerRegistryOrg: ").append(toIndentedString(dockerRegistryOrg)).append("\n");
    sb.append("    envOrganisation: ").append(toIndentedString(envOrganisation)).append("\n");
    sb.append("    forkBranchPatterns: ").append(toIndentedString(forkBranchPatterns)).append("\n");
    sb.append("    gitPrivate: ").append(toIndentedString(gitPrivate)).append("\n");
    sb.append("    gitServer: ").append(toIndentedString(gitServer)).append("\n");
    sb.append("    helmBinary: ").append(toIndentedString(helmBinary)).append("\n");
    sb.append("    helmTemplate: ").append(toIndentedString(helmTemplate)).append("\n");
    sb.append("    importMode: ").append(toIndentedString(importMode)).append("\n");
    sb.append("    kubeProvider: ").append(toIndentedString(kubeProvider)).append("\n");
    sb.append("    noTiller: ").append(toIndentedString(noTiller)).append("\n");
    sb.append("    organisation: ").append(toIndentedString(organisation)).append("\n");
    sb.append("    pipelineUsername: ").append(toIndentedString(pipelineUsername)).append("\n");
    sb.append("    postPreviewJobs: ").append(toIndentedString(postPreviewJobs)).append("\n");
    sb.append("    promotionEngine: ").append(toIndentedString(promotionEngine)).append("\n");
    sb.append("    prowEngine: ").append(toIndentedString(prowEngine)).append("\n");
    sb.append("    quickstartLocations: ").append(toIndentedString(quickstartLocations)).append("\n");
    sb.append("    storageLocations: ").append(toIndentedString(storageLocations)).append("\n");
    sb.append("    useGitOps: ").append(toIndentedString(useGitOps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

